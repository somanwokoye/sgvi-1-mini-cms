{"version":3,"sources":["App2.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["App2","props","useState","name","setName","type","placeholder","onInput","event","target","value","defaultProps","App","jwtToken","Boolean","window","location","hostname","match","initialData","document","getElementById","getAttribute","initialProps","JSON","parse","ReactDOM","hydrate","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8NAOMA,EAAwB,SAACC,GAAW,MAEhBC,mBAASD,EAAME,MAFC,mBAEjCA,EAFiC,KAE3BC,EAF2B,KAQxC,OACI,6BACI,oCAAUD,EAAV,2BACA,2BACI,2BAAOE,KAAK,OAAOC,YAAY,uBAAuBH,KAAK,gBAAgBI,QAR7D,SAACC,GACvBJ,EAAQI,EAAMC,OAAOC,aAc3BV,EAAKW,aAAe,CAClBR,KAAM,QAIOH,QCDAY,EAjBc,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAC7B,OACE,6BACE,gJAIA,mDACuB,gCAASA,IAEhC,kBAAC,EAAD,QCXcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCDN,IAAMC,EAAcC,SAASC,eAAe,iBAAkBC,aAAa,aAErEC,EAAmBC,KAAKC,MAAMN,GAA0B,IAC9DO,IAASC,QAAQ,kBAAC,EAAQJ,GAAiBH,SAASC,eAAe,SDuH7D,kBAAmBO,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.003a4fc9.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\ntype Props = {\n  name?: string;\n  other?: string;\n}\n\nconst App2: React.FC<Props> = (props)  => {\n  //Syntax for state is const [state, setState] = useState(initialState);\n  const [name, setName] = useState(props.name);\n\n  const changeNameToGreet = (event: any) => {\n      setName(event.target.value);\n  }\n\n  return (\n      <div>\n          <p>Hello {name}. Greetings from React.</p> \n          <p>\n              <input type=\"text\" placeholder=\"Write a name here...\" name=\"name_to_greet\" onInput={changeNameToGreet}/>\n          </p>\n      </div>\n  )\n\n}\n\nApp2.defaultProps = {\n  name: \"John\"\n} \n\n\nexport default App2;\n","import React from 'react';\nimport App2 from './App2'\n\n/**\n * Here, we take for granted that on initialization, \n * jwt token string may be sent by the server, if there is valid login\n * To get the userinfo and roles from the token, \n * we can use https://github.com/auth0/jwt-decode\n */\ntype Props = {\n  jwtToken?: string\n}\n\nconst App: React.FC<Props> = ({jwtToken}) => {\n  return (\n    <div >\n      <p>\n        This content was sent from the React component.\n        The flow is now ready for further react-based client development.\n      </p>\n      <p>\n        The passed token is: <strong>{jwtToken}</strong>\n      </p>\n      <App2 />\n      \n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n/* For server side rendering support, we need to use hydrate.\nWe will also get the json data that was written to our server-side template for use here\nOf course, this assumes that we have linked the built js clients to the server side template\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n*/\n\nconst initialData = document.getElementById('initial-props')!.getAttribute('data-json')!;\n\nconst initialProps: {} = JSON.parse(initialData? initialData: '');//parse initial data or empty string\nReactDOM.hydrate(<App {...initialProps}/>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}